#!/usr/bin/env python3
"""
AWS Lambda Function for Daily Stock Data Fetching

This Lambda function fetches the latest daily stock data from Alpha Vantage API
and stores it in AWS S3. It is designed to be triggered on a schedule.
"""

import os
import sys
import json
import logging
import time
from datetime import datetime, timedelta
import traceback

# „Çø„Ç§„É†„Çæ„Éº„É≥Âá¶ÁêÜÁî®
try:
    # Python 3.9‰ª•Èôç„ÅÆÊ®ôÊ∫ñ„É©„Ç§„Éñ„É©„É™
    from zoneinfo import ZoneInfo
    def get_jst_time():
        return datetime.now(ZoneInfo("Asia/Tokyo"))
except ImportError:
    # Python 3.9Êú™Ê∫Ä„Åæ„Åü„ÅØzoneinfoÈùûÂØæÂøúÁí∞Â¢ÉÁî®
    try:
        import pytz
        def get_jst_time():
            return datetime.now(pytz.timezone('Asia/Tokyo'))
    except ImportError:
        # pytz„ÇÇÂà©Áî®„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅUTC„Å´9ÊôÇÈñì„ÇíÂä†ÁÆó
        def get_jst_time():
            return datetime.now() + timedelta(hours=9)

# LambdaÁí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö
os.environ['AWS_LAMBDA_EXECUTION'] = 'true'

# „É≠„Ç¨„ÉºÂàùÊúüÂåñ
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# src„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí„Ç§„É≥„Éù„Éº„Éà„Éë„Çπ„Å´ËøΩÂä†
sys.path.append('.')
sys.path.append('/var/task')  # LambdaÁí∞Â¢É„Åß„ÅÆ„É´„Éº„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™

# ‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„Ç§„É≥„Éù„Éº„Éà„ÇíÈÅÖÂª∂„Åï„Åõ„ÇãÔºàLambdaÂÆüË°åÊôÇ„Å´ÂøÖË¶Å„Å™„ÇÇ„ÅÆ„Å†„Åë„Çí„Ç§„É≥„Éù„Éº„ÉàÔºâ
try:
    from utils.alerts import AlertManager
except ImportError:
    # LambdaÁí∞Â¢É„Åß„ÅØÁõ¥Êé•„Ç§„É≥„Éù„Éº„Éà„ÇíË©¶„Åø„Çã
    try:
        from alerts import AlertManager
    except ImportError:
        logger.error("AlertManager„ÅÆ„Ç§„É≥„Éù„Éº„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")

def setup_logging():
    """
    Set up logging configuration.
    
    Returns:
        Logger object
    """
    # „É≠„Ç¨„ÉºÂàùÊúüÂåñ
    logger = logging.getLogger(__name__)
    
    # LambdaÁí∞Â¢É„Åß„ÅØ„É≠„Ç∞„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí/tmp‰ª•‰∏ã„Å´Ë®≠ÂÆö
    log_dir = '/tmp/logs'
    
    # „É≠„Ç∞„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ‰ΩúÊàê
    try:
        os.makedirs(log_dir, exist_ok=True)
        logger.info(f"„É≠„Ç∞„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü: {log_dir}")
    except Exception as e:
        logger.error(f"„É≠„Ç∞„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {e}")
        logger.error(traceback.format_exc())
    
    # „Éè„É≥„Éâ„É©„Éº„ÇíË®≠ÂÆö
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    
    # „Éï„Ç©„Éº„Éû„ÉÉ„Çø„Éº„ÇíË®≠ÂÆö
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    console_handler.setFormatter(formatter)
    
    # „É≠„Ç¨„Éº„Å´„Éè„É≥„Éâ„É©„Éº„ÇíËøΩÂä†
    logger.addHandler(console_handler)
    
    return logger

def lambda_handler(event, context):
    """
    AWS Lambda handler function.
    
    Args:
        event: Lambda event data
        context: Lambda context
        
    Returns:
        Dictionary with execution results
    """
    start_time = time.time()
    
    # „É≠„ÇÆ„É≥„Ç∞„ÅÆË®≠ÂÆö
    logger = setup_logging()
    
    # Áí∞Â¢ÉÂ§âÊï∞„ÇíÂèñÂæó
    api_key = os.environ.get('ALPHA_VANTAGE_API_KEY', 'demo')
    s3_bucket = os.environ.get('S3_BUCKET', 'Not set')
    region = os.environ.get('REGION', 'ap-northeast-1')
    stock_symbols = os.environ.get('STOCK_SYMBOLS', 'NVDA,AAPL,MSFT')
    mock_mode = os.environ.get('MOCK_MODE', 'false').lower() == 'true'
    debug_mode = os.environ.get('DEBUG_MODE', 'false').lower() == 'true'
    
    # SlackÈÄöÁü•„ÅÆË®≠ÂÆö„ÇíÂèñÂæó
    slack_enabled = os.environ.get('SLACK_ENABLED', 'false').lower() == 'true'
    slack_webhook_url = os.environ.get('SLACK_WEBHOOK_URL', '')
    slack_webhook_url_error = os.environ.get('SLACK_WEBHOOK_URL_ERROR', slack_webhook_url)
    slack_webhook_url_warning = os.environ.get('SLACK_WEBHOOK_URL_WARNING', slack_webhook_url)
    slack_webhook_url_info = os.environ.get('SLACK_WEBHOOK_URL_INFO', slack_webhook_url)
    
    # AlertManager„ÅÆÂàùÊúüÂåñ
    alert_manager = None
    if slack_enabled:
        try:
            alert_manager = AlertManager(
                None,  # email_config
                slack_webhook_url,
                slack_webhook_url_error,
                slack_webhook_url_warning,
                slack_webhook_url_info
            )
            alert_manager.set_logger(logger)
            logger.info("AlertManager„ÇíÂàùÊúüÂåñ„Åó„Åæ„Åó„Åü")
            
            # „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ„ÅÆÂ†¥Âêà„ÅØSlackË®≠ÂÆö„ÅÆË©≥Á¥∞„Çí„É≠„Ç∞„Å´Âá∫Âäõ
            if debug_mode:
                logger.debug("=" * 80)
                logger.debug("SlackË®≠ÂÆö„ÅÆË©≥Á¥∞:")
                logger.debug(f"slack_enabled: {slack_enabled}")
                logger.debug(f"slack_webhook_url: {slack_webhook_url}")
                logger.debug(f"slack_webhook_url_error: {slack_webhook_url_error}")
                logger.debug(f"slack_webhook_url_warning: {slack_webhook_url_warning}")
                logger.debug(f"slack_webhook_url_info: {slack_webhook_url_info}")
                logger.debug("=" * 80)
        except Exception as e:
            logger.error(f"AlertManager„ÅÆÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {e}")
            logger.error(traceback.format_exc())
    
    # ÂÆüË°å„É¢„Éº„Éâ„ÇíË®≠ÂÆö
    env_type = "Lambda"
    if mock_mode:
        env_type += " (Mock)"
    
    # ÂÆüË°åÈñãÂßã„É≠„Ç∞
    logger.info("=" * 80)
    logger.info(f"üöÄ Starting Lambda function for daily stock data fetch at {datetime.now().isoformat()}")
    logger.info(f"üîß Environment: {env_type}")
    logger.info(f"üîë API Key: {'*' * (len(api_key) - 4) + api_key[-4:] if len(api_key) > 4 else '****'}")
    logger.info(f"ü™£ S3 Bucket: {s3_bucket}")
    logger.info(f"üåê Region: {region}")
    logger.info(f"üìä Stock Symbols: {stock_symbols}")
    logger.info(f"üêõ Debug Mode: {debug_mode}")
    logger.info("=" * 80)
    
    try:
        # „É¢„ÉÉ„ÇØ„É¢„Éº„Éâ„ÅÆÂ†¥Âêà„ÅØ„ÉÄ„Éü„Éº„Éá„Éº„Çø„ÇíËøî„Åô
        if mock_mode:
            logger.info("„É¢„ÉÉ„ÇØ„É¢„Éº„Éâ„ÅßÂÆüË°å‰∏≠„Åß„Åô„ÄÇ„ÉÄ„Éü„Éº„Éá„Éº„Çø„ÇíËøî„Åó„Åæ„Åô„ÄÇ")
            
            # ÂÆüË°åÊôÇÈñì„ÇíË®àÁÆó
            end_time = time.time()
            execution_time = end_time - start_time
            
            return {
                'statusCode': 200,
                'body': json.dumps({
                    'success': True,
                    'execution_time': f"{execution_time:.2f} seconds",
                    'message': 'Mock mode execution successful',
                    'data': {
                        'symbols': stock_symbols.split(','),
                        'timestamp': datetime.now().isoformat()
                    }
                })
            }
        
        # ÂÆüÈöõ„ÅÆ„Éá„Éº„ÇøÂèñÂæóÂá¶ÁêÜ
        logger.info("Alpha Vantage API„Åã„Çâ„Éá„Éº„Çø„ÇíÂèñÂæó„Åó„Åæ„Åô...")
        
        # „Åì„Åì„ÅßÂÆüÈöõ„ÅÆ„Éá„Éº„ÇøÂèñÂæóÂá¶ÁêÜ„ÇíË°å„ÅÜ
        # Ê≥®ÊÑè: ‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„Ç§„É≥„Éù„Éº„Éà„ÅØ„Åì„Åì„ÅßË°å„ÅÜ
        try:
            import boto3
            from botocore.exceptions import ClientError
            
            # S3„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÇíÂàùÊúüÂåñ
            s3_client = boto3.client('s3', region_name=region)
            
            # Ê†™Âºè„Ç∑„É≥„Éú„É´„ÅÆ„É™„Çπ„Éà
            symbols = stock_symbols.split(',')
            
            # ÂêÑ„Ç∑„É≥„Éú„É´„Å´ÂØæ„Åó„Å¶Âá¶ÁêÜ„ÇíÂÆüË°å
            results = {}
            error_details = {}  # „Ç®„É©„Éº„ÅÆË©≥Á¥∞„ÇíË®òÈå≤„Åô„ÇãËæûÊõ∏
            for symbol in symbols:
                logger.info(f"„Ç∑„É≥„Éú„É´ {symbol} „ÅÆÂá¶ÁêÜ„ÇíÈñãÂßã„Åó„Åæ„Åô...")
                
                # Alpha Vantage API„Åã„Çâ„Éá„Éº„Çø„ÇíÂèñÂæó
                try:
                    import requests
                    
                    # API„É™„ÇØ„Ç®„Çπ„ÉàURL„ÇíÊßãÁØâ
                    base_url = "https://www.alphavantage.co/query"
                    params = {
                        "function": "TIME_SERIES_DAILY",
                        "symbol": symbol,
                        "apikey": api_key,
                        "outputsize": "compact"  # ÊúÄÊñ∞„ÅÆ100‰ª∂„ÅÆ„Éá„Éº„Çø„ÇíÂèñÂæó
                    }
                    
                    # API„É™„ÇØ„Ç®„Çπ„Éà„ÇíÈÄÅ‰ø°
                    logger.info(f"Alpha Vantage API„Å´„É™„ÇØ„Ç®„Çπ„Éà„ÇíÈÄÅ‰ø°„Åó„Åæ„Åô: {base_url}?function={params['function']}&symbol={params['symbol']}&outputsize={params['outputsize']}")
                    response = requests.get(base_url, params=params)
                    
                    # „É¨„Çπ„Éù„É≥„Çπ„ÇíÁ¢∫Ë™ç
                    if response.status_code != 200:
                        error_msg = f"API„É™„ÇØ„Ç®„Çπ„Éà„ÅåÂ§±Êïó„Åó„Åæ„Åó„Åü: „Çπ„ÉÜ„Éº„Çø„Çπ„Ç≥„Éº„Éâ {response.status_code}"
                        logger.error(error_msg)
                        logger.error(f"„É¨„Çπ„Éù„É≥„Çπ: {response.text}")
                        results[symbol] = 'error'
                        error_details[symbol] = {
                            'error_type': 'API Request Error',
                            'status_code': response.status_code,
                            'message': error_msg,
                            'response': response.text[:200] + '...' if len(response.text) > 200 else response.text
                        }
                        continue
                    
                    # JSON„Éá„Éº„Çø„ÇíËß£Êûê
                    data = response.json()
                    
                    # „Ç®„É©„Éº„ÉÅ„Çß„ÉÉ„ÇØ
                    if "Error Message" in data:
                        error_msg = f"API„Ç®„É©„Éº: {data['Error Message']}"
                        logger.error(error_msg)
                        results[symbol] = 'error'
                        error_details[symbol] = {
                            'error_type': 'API Error',
                            'message': error_msg,
                            'api_error': data['Error Message']
                        }
                        continue
                    
                    if "Time Series (Daily)" not in data:
                        error_msg = f"‰∫àÊúü„Åó„Å™„ÅÑAPI„É¨„Çπ„Éù„É≥„ÇπÂΩ¢Âºè"
                        logger.error(f"{error_msg}: {data}")
                        results[symbol] = 'error'
                        error_details[symbol] = {
                            'error_type': 'Unexpected Response Format',
                            'message': error_msg,
                            'response_keys': list(data.keys())
                        }
                        continue
                    
                    # ÊúÄÊñ∞„ÅÆÊó•‰ªò„ÅÆ„Éá„Éº„Çø„ÇíÂèñÂæó
                    time_series = data["Time Series (Daily)"]
                    latest_date = list(time_series.keys())[0]  # ÊúÄÂàù„ÅÆ„Ç≠„Éº„ÅåÊúÄÊñ∞„ÅÆÊó•‰ªò
                    latest_data = time_series[latest_date]
                    
                    # ÂøÖË¶Å„Å™„Éá„Éº„Çø„ÇíÊäΩÂá∫
                    stock_data = {
                        'symbol': symbol,
                        'timestamp': datetime.now().isoformat(),
                        'date': latest_date,
                        'open': float(latest_data['1. open']),
                        'high': float(latest_data['2. high']),
                        'low': float(latest_data['3. low']),
                        'close': float(latest_data['4. close']),
                        'volume': int(latest_data['5. volume'])
                    }
                    
                    logger.info(f"„Éá„Éº„Çø„ÇíÂèñÂæó„Åó„Åæ„Åó„Åü: {symbol} ({latest_date})")
                    
                except Exception as e:
                    error_msg = f"„Éá„Éº„ÇøÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}"
                    logger.error(error_msg)
                    logger.error(traceback.format_exc())
                    results[symbol] = 'error'
                    error_details[symbol] = {
                        'error_type': 'Data Fetch Error',
                        'message': error_msg,
                        'symbol': symbol,
                        'error': str(e)
                    }
                    continue
                
                # S3„Å´„Éá„Éº„Çø„Çí‰øùÂ≠ò
                try:
                    s3_key = f"daily/{symbol}/{latest_date}.json"
                    s3_client.put_object(
                        Bucket=s3_bucket,
                        Key=s3_key,
                        Body=json.dumps(stock_data),
                        ContentType='application/json'
                    )
                    logger.info(f"„Éá„Éº„Çø„ÇíS3„Å´‰øùÂ≠ò„Åó„Åæ„Åó„Åü: s3://{s3_bucket}/{s3_key}")
                    results[symbol] = 'success'
                except ClientError as e:
                    error_msg = f"S3„Å∏„ÅÆ„Éá„Éº„Çø‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {e}"
                    logger.error(error_msg)
                    results[symbol] = 'error'
                    error_details[symbol] = {
                        'error_type': 'S3 Storage Error',
                        'message': error_msg,
                        's3_bucket': s3_bucket,
                        's3_key': s3_key,
                        'error': str(e)
                    }
                except Exception as e:
                    error_msg = f"S3„Å∏„ÅÆ„Éá„Éº„Çø‰øùÂ≠ò‰∏≠„Å´‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}"
                    logger.error(error_msg)
                    logger.error(traceback.format_exc())
                    results[symbol] = 'error'
                    error_details[symbol] = {
                        'error_type': 'Unexpected S3 Error',
                        'message': error_msg,
                        'error': str(e)
                    }
            
            # ÂÆüË°åÊôÇÈñì„ÇíË®àÁÆó
            end_time = time.time()
            execution_time = end_time - start_time
            
            # ÁµêÊûú„ÇíÈõÜË®à
            success_count = sum(1 for result in results.values() if result == 'success')
            failure_count = sum(1 for result in results.values() if result != 'success')
            
            # SlackÈÄöÁü•„ÇíÈÄÅ‰ø°
            if slack_enabled and alert_manager:
                try:
                    # ÂÆüË°åÁí∞Â¢ÉÊÉÖÂ†±„ÇíÂèñÂæó
                    env_info = f"Environment: {env_type}"
                    utc_timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    jst_timestamp = get_jst_time().strftime("%Y-%m-%d %H:%M:%S")
                    
                    # ÂÖ±ÈÄö„ÅÆ„Éï„Ç£„Éº„É´„Éâ
                    common_fields = [
                        {"title": "Environment", "value": env_type, "short": True},
                        {"title": "Execution Time", "value": f"{execution_time:.2f} seconds", "short": True},
                        {"title": "Timestamp (UTC)", "value": utc_timestamp, "short": True},
                        {"title": "Timestamp (JST)", "value": jst_timestamp, "short": True},
                    ]
                    
                    # ÁµêÊûú„Å´Âü∫„Å•„ÅÑ„Å¶ÈÄöÁü•„ÇíÈÄÅ‰ø°
                    if failure_count > 0:
                        # Â§±Êïó„Åó„Åü„Ç∑„É≥„Éú„É´„ÇíÊäΩÂá∫
                        failed_symbols = [symbol for symbol, result in results.items() if result != 'success']
                        
                        # Â§±ÊïóÊÉÖÂ†±„ÇíË©≥Á¥∞„Å´Âê´„ÇÅ„Çã
                        failure_fields = [
                            {"title": "Failed Symbols", "value": ", ".join(failed_symbols), "short": False},
                            {"title": "Success Count", "value": str(success_count), "short": True},
                            {"title": "Failure Count", "value": str(failure_count), "short": True}
                        ]
                        
                        # „Ç®„É©„Éº„ÅÆË©≥Á¥∞ÊÉÖÂ†±„ÇíËøΩÂä†
                        for symbol in failed_symbols:
                            if symbol in error_details:
                                error_info = error_details[symbol]
                                failure_fields.append({
                                    "title": f"Error Details for {symbol}",
                                    "value": f"Type: {error_info.get('error_type', 'Unknown')}\nMessage: {error_info.get('message', 'No message')}",
                                    "short": False
                                })
                        
                        # Ë©≥Á¥∞„Å™ÁµêÊûúÊÉÖÂ†±
                        detailed_results = "\n".join([f"{symbol}: {result}" for symbol, result in results.items()])
                        
                        # Ë≠¶Âëä„Ç¢„É©„Éº„Éà„ÇíÈÄÅ‰ø°
                        alert_message = f"‚ö†Ô∏è Lambda: Daily stock data fetch completed with {failure_count} failures"
                        alert_details = f"""
WARNING: Some stock data fetch operations failed.

Execution time: {execution_time:.2f} seconds
Environment: {env_type}
Successful: {success_count}
Failed: {failure_count}

Failed symbols: {', '.join(failed_symbols)}

Detailed results:
{detailed_results}
"""
                        alert_manager.send_warning_alert(
                            alert_message,
                            alert_details,
                            source="lambda_function.py",
                            send_email=False,
                            send_slack=True,
                            additional_fields=common_fields + failure_fields
                        )
                        logger.info("‚úÖ Ë≠¶ÂëäÈÄöÁü•„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü")
                    else:
                        # ÊàêÂäü„Åó„Åü„Ç∑„É≥„Éú„É´„ÇíÊäΩÂá∫
                        successful_symbols = [symbol for symbol, result in results.items() if result == 'success']
                        
                        # ÊàêÂäüÊÉÖÂ†±„ÇíË©≥Á¥∞„Å´Âê´„ÇÅ„Çã
                        success_fields = [
                            {"title": "Successful Symbols", "value": ", ".join(successful_symbols), "short": False},
                            {"title": "Total Successful", "value": str(success_count), "short": True}
                        ]
                        
                        # ÊàêÂäü„Ç¢„É©„Éº„Éà„ÇíÈÄÅ‰ø°
                        alert_message = f"‚úÖ Lambda: Daily stock data fetch completed successfully for all {success_count} symbols"
                        alert_details = f"""
INFO: Stock data fetch summary.

Execution time: {execution_time:.2f} seconds
Environment: {env_type}
Successful symbols: {', '.join(successful_symbols)}
Total successful: {success_count}
"""
                        alert_manager.send_success_alert(
                            alert_message,
                            alert_details,
                            source="lambda_function.py",
                            send_email=False,
                            send_slack=True,
                            additional_fields=common_fields + success_fields
                        )
                        logger.info("‚úÖ ÊàêÂäüÈÄöÁü•„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü")
                except Exception as e:
                    logger.error(f"‚ùå SlackÈÄöÁü•Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}")
                    logger.error(traceback.format_exc())
            elif slack_enabled:
                logger.warning("AlertManager„ÅåÂàùÊúüÂåñ„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Åü„ÇÅ„ÄÅSlackÈÄöÁü•„ÇíÈÄÅ‰ø°„Åß„Åç„Åæ„Åõ„Çì")
            else:
                logger.info("SlackÈÄöÁü•„ÅØÁÑ°ÂäπÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô")
            
            return {
                'statusCode': 200,
                'body': json.dumps({
                    'success': True,
                    'execution_time': f"{execution_time:.2f} seconds",
                    'results': results,
                    'success_count': success_count,
                    'failure_count': failure_count
                })
            }
        except ImportError as e:
            logger.error(f"‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„Ç§„É≥„Éù„Éº„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {e}")
            logger.error(traceback.format_exc())
            raise
    except Exception as e:
        # „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà
        end_time = time.time()
        execution_time = end_time - start_time
        
        logger.error(f"‚ùå LambdaÈñ¢Êï∞„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}")
        logger.error(traceback.format_exc())
        
        # „Ç®„É©„ÉºÈÄöÁü•„ÇíSlack„Å´ÈÄÅ‰ø°
        if slack_enabled and alert_manager:
            try:
                # ÂÆüË°åÁí∞Â¢ÉÊÉÖÂ†±„ÇíÂèñÂæó
                env_info = f"Environment: {env_type}"
                utc_timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                jst_timestamp = get_jst_time().strftime("%Y-%m-%d %H:%M:%S")
                
                # „Ç®„É©„ÉºÊÉÖÂ†±„ÇíË©≥Á¥∞„Å´Âê´„ÇÅ„Çã
                error_fields = [
                    {"title": "Environment", "value": env_type, "short": True},
                    {"title": "Execution Time", "value": f"{execution_time:.2f} seconds", "short": True},
                    {"title": "Timestamp (UTC)", "value": utc_timestamp, "short": True},
                    {"title": "Timestamp (JST)", "value": jst_timestamp, "short": True},
                    {"title": "Error", "value": str(e), "short": False}
                ]
                
                # „Ç®„É©„Éº„Ç¢„É©„Éº„Éà„ÇíÈÄÅ‰ø°
                alert_message = f"‚ùå Lambda: Daily stock data fetch failed with error"
                alert_details = f"""
ERROR: Lambda function execution failed.

Execution time: {execution_time:.2f} seconds
Environment: {env_type}
Error: {str(e)}

Stack trace:
{traceback.format_exc()}
"""
                alert_manager.send_error_alert(
                    alert_message,
                    alert_details,
                    source="lambda_function.py",
                    send_email=False,
                    send_slack=True,
                    additional_fields=error_fields
                )
                logger.info("‚úÖ „Ç®„É©„ÉºÈÄöÁü•„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü")
            except Exception as notify_error:
                logger.error(f"‚ùå SlackÈÄöÁü•Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {notify_error}")
                logger.error(traceback.format_exc())
        
        # LambdaÈñ¢Êï∞„ÅÆÊàª„ÇäÂÄ§Ôºà„Ç®„É©„ÉºÔºâ
        return {
            'statusCode': 500,
            'body': json.dumps({
                'success': False,
                'execution_time': f"{execution_time:.2f} seconds",
                'error': str(e)
            })
        }

# „É≠„Éº„Ç´„É´„ÉÜ„Çπ„ÉàÁî®
if __name__ == "__main__":
    try:
        # „ÉÜ„Çπ„ÉàÁî®„ÅÆ„Ç§„Éô„É≥„Éà„Å®„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà
        test_event = {}
        test_context = None
        
        # LambdaÈñ¢Êï∞„ÇíÂÆüË°å
        result = lambda_handler(test_event, test_context)
        print(f"Lambda function result: {json.dumps(result, indent=2)}")
    except Exception as e:
        # Catch any unexpected exceptions
        print(f"‚ùå Critical error: {e}")
        traceback.print_exc()
        sys.exit(1)
